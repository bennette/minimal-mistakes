if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
read.world<-function(filePath)
{
all_content<-readLines(filePath)
all_content<-all_content[-c(1,2)]
data<-read.csv(textConnection(all_content),header=TRUE, stringsAsFactors=TRUE)
return(data)
}
#possible targets
cereal<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/cereal_yield/ag.yld.crel.kg_Indicator_en_csv_v2.csv")
crop_index<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/crop_production_index/ag.prd.crop.xd_Indicator_en_csv_v2.csv")
#possible regressors
labor_force<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/labor_force/sl.tlf.totl.in_Indicator_en_csv_v2.csv")
unemployment_rate<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/unemployment_per/sl.uem.totl.zs_Indicator_en_csv_v2.csv")
ag_employ<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_employment/sl.agr.empl.zs_Indicator_en_csv_v2.csv")
gdp<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp/ny.gdp.mktp.cd_Indicator_en_csv_v2.csv")
gdp_capita<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp_per_capita/ny.gdp.pcap.cd_Indicator_en_csv_v2.csv")
irrigated_land<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/irrigated_land/ag.lnd.irig.ag.zs_Indicator_en_csv_v2.csv")
land_area<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/land_area/ag.lnd.totl.k2_Indicator_en_csv_v2.csv")
ag_land_per<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_land_per/ag.lnd.agri.zs_Indicator_en_csv_v2.csv")
population<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/population_total/sp.pop.totl_Indicator_en_csv_v2.csv")
#make a dataframe for a given country
df<-data.frame(Year=c(1960:2014))
country<-"Germany"
######################
######cheat here######
######################
#we really know unemployment rate
#unemployment doesn't count people not looking for work
#the result is that the employed_per is higher than reality!
df$labor_force<-melt(labor_force[which(labor_force$Country.Name==country),c(-2,-3,-4)])$value
df$employed_per<-100-(melt(unemployment_rate[which(unemployment_rate$Country.Name==country),c(-2,-3,-4)])$value)
df$ag_employ<-melt(ag_employ[which(ag_employ$Country.Name==country),c(-2,-3,-4)])$value
#land_area, ag_land_per, and irrigated_land_per can be combined in different ways
df$land_area<-melt(land_area[which(land_area$Country.Name==country),c(-2,-3,-4)])$value
df$ag_land_per<-melt(ag_land_per[which(ag_land_per$Country.Name==country),c(-2,-3,-4)])$value
df$irrigated_land_per<-melt(irrigated_land[which(irrigated_land$Country.Name==country),c(-2,-3,-4)])$value
#gdp info
df$gdp<-melt(gdp[which(gdp$Country.Name==country),c(-2,-3,-4)])$value
df$population<-melt(population[which(population$Country.Name==country),c(-2,-3,-4)])$value
df$gdp_capita<-melt(gdp_capita[which(gdp_capita$Country.Name==country),c(-2,-3,-4)])$value
#possible targets
df$cereal<-melt(cereal[which(cereal$Country.Name==country),c(-2,-3,-4)])$value
df$crop_index<-melt(crop_index[which(crop_index$Country.Name==country),c(-2,-3,-4)])$value
Year<-df$Year
df_use<-as.data.frame(Year)
df_use$agriculture_employees<-df$labor_force*df$employed_per*df$ag_employ
df_use$agriculture_land<-df$land_area*df$ag_land_per
df_use$irrigated_agriculture_land<-df_use$agriculture_land*df$irrigated_land_per
df_use$gdp_per_capita<-df$gdp_capita
df_use$cereal<-df$cereal
df_use$crop_index<-df$crop_index
df_use$crop_index_1<-NA
df_use$crop_index_1[2:dim(df_use)[1]]<-df_use$crop_index[1:dim(df_use)[1]-1]
df_use$crop_index_2<-NA
df_use$crop_index_2[3:dim(df_use)[1]]<-df_use$crop_index[1:(dim(df_use)[1]-2)]
##################################
####                         #####
####          Plots          #####
####                         #####
##################################
dim(df_use[,2])
p1<-ggplot(df_use, aes(x=Year, y=crop_index))+
geom_line()+theme_classic()+
ggtitle("Crop index")+ylab("")
p2<-ggplot(df_use, aes(x=Year, y=log(gdp_per_capita)))+
geom_line()+theme_classic()+
ggtitle("Log GDP per capita")+ylab("")
p3<-ggplot(df_use, aes(x=Year, y=gdp_per_capita))+
geom_line()+theme_classic()+
ggtitle("GDP per capita")+ylab("")
p4<-ggplot(df_use, aes(x=Year, y=agriculture_employees))+
geom_line()+theme_classic()+
ggtitle("Agriculture employees")+ylab("")
p5<-ggplot(df_use, aes(x=Year, y=agriculture_land))+
geom_line()+theme_classic()+
ggtitle("Agriculture land")+ylab("")
p6<-ggplot(df_use, aes(x=Year, y=irrigated_agriculture_land))+
geom_line()+theme_classic()+
ggtitle("Irrigated agriculture land")+ylab("")
p7<-ggplot(df_use, aes(x=Year, y=crop_index_1))+
geom_line()+theme_classic()+
ggtitle("Crop index t(-1)")+ylab("")
p8<-ggplot(df_use, aes(x=Year, y=crop_index_1))+
geom_line()+theme_classic()+
ggtitle("Crop index t(-2)")+ylab("")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8, cols=2)
##################################
####                         #####
####      Regression         #####
####                         #####
##################################
line<-lm(crop_index ~ log(gdp_per_capita), data=df_use, na.action=na.exclude)
here<-capture.output(print(summary(line)))
str(here)
predict(line, df_use)
summary(line)$r.squared
summary(line)
shiny::runApp('~/Desktop/Shiny document/food')
?printf
?sprintf
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%.2f", pi)
shiny::runApp('~/Desktop/Shiny document/food')
shiny::runApp('~/Desktop/Shiny document/food')
library(reshape)
library(ggplot2)
library(gtools)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
read.world<-function(filePath)
{
all_content<-readLines(filePath)
all_content<-all_content[-c(1,2)]
data<-read.csv(textConnection(all_content),header=TRUE, stringsAsFactors=TRUE)
return(data)
}
#possible targets
cereal<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/cereal_yield/ag.yld.crel.kg_Indicator_en_csv_v2.csv")
crop_index<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/crop_production_index/ag.prd.crop.xd_Indicator_en_csv_v2.csv")
#possible regressors
labor_force<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/labor_force/sl.tlf.totl.in_Indicator_en_csv_v2.csv")
unemployment_rate<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/unemployment_per/sl.uem.totl.zs_Indicator_en_csv_v2.csv")
ag_employ<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_employment/sl.agr.empl.zs_Indicator_en_csv_v2.csv")
gdp<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp/ny.gdp.mktp.cd_Indicator_en_csv_v2.csv")
gdp_capita<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp_per_capita/ny.gdp.pcap.cd_Indicator_en_csv_v2.csv")
irrigated_land<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/irrigated_land/ag.lnd.irig.ag.zs_Indicator_en_csv_v2.csv")
land_area<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/land_area/ag.lnd.totl.k2_Indicator_en_csv_v2.csv")
ag_land_per<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_land_per/ag.lnd.agri.zs_Indicator_en_csv_v2.csv")
population<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/population_total/sp.pop.totl_Indicator_en_csv_v2.csv")
#make a dataframe for a given country
df<-data.frame(Year=c(1960:2014))
country<-"European Union"
######################
######cheat here######
######################
#we really know unemployment rate
#unemployment doesn't count people not looking for work
#the result is that the employed_per is higher than reality!
df$labor_force<-melt(labor_force[which(labor_force$Country.Name==country),c(-2,-3,-4)])$value
df$employed_per<-100-(melt(unemployment_rate[which(unemployment_rate$Country.Name==country),c(-2,-3,-4)])$value)
df$ag_employ<-melt(ag_employ[which(ag_employ$Country.Name==country),c(-2,-3,-4)])$value
#land_area, ag_land_per, and irrigated_land_per can be combined in different ways
df$land_area<-melt(land_area[which(land_area$Country.Name==country),c(-2,-3,-4)])$value
df$ag_land_per<-melt(ag_land_per[which(ag_land_per$Country.Name==country),c(-2,-3,-4)])$value
df$irrigated_land_per<-melt(irrigated_land[which(irrigated_land$Country.Name==country),c(-2,-3,-4)])$value
#gdp info
df$gdp<-melt(gdp[which(gdp$Country.Name==country),c(-2,-3,-4)])$value
df$population<-melt(population[which(population$Country.Name==country),c(-2,-3,-4)])$value
df$gdp_capita<-melt(gdp_capita[which(gdp_capita$Country.Name==country),c(-2,-3,-4)])$value
#possible targets
df$cereal<-melt(cereal[which(cereal$Country.Name==country),c(-2,-3,-4)])$value
df$crop_index<-melt(crop_index[which(crop_index$Country.Name==country),c(-2,-3,-4)])$value
Year<-df$Year
df_use<-as.data.frame(Year)
df_use$agriculture_employees<-df$labor_force*df$employed_per*df$ag_employ
df_use$agriculture_land<-df$land_area*df$ag_land_per
df_use$irrigated_agriculture_land<-df_use$agriculture_land*df$irrigated_land_per
df_use$gdp_per_capita<-df$gdp_capita
df_use$cereal<-df$cereal
df_use$crop_index<-df$crop_index
df_use$crop_index_1<-NA
df_use$crop_index_1[2:dim(df_use)[1]]<-df_use$crop_index[1:dim(df_use)[1]-1]
df_use$crop_index_2<-NA
df_use$crop_index_2[3:dim(df_use)[1]]<-df_use$crop_index[1:(dim(df_use)[1]-2)]
##################################
####                         #####
####          Plots          #####
####                         #####
##################################
dim(df_use[,2])
p1<-ggplot(df_use, aes(x=Year, y=crop_index))+
geom_line()+theme_classic()+
ggtitle("Crop index")+ylab("")
p2<-ggplot(df_use, aes(x=Year, y=log(gdp_per_capita)))+
geom_line()+theme_classic()+
ggtitle("Log GDP per capita")+ylab("")
p3<-ggplot(df_use, aes(x=Year, y=gdp_per_capita))+
geom_line()+theme_classic()+
ggtitle("GDP per capita")+ylab("")
p4<-ggplot(df_use, aes(x=Year, y=agriculture_employees))+
geom_line()+theme_classic()+
ggtitle("Agriculture employees")+ylab("")
p5<-ggplot(df_use, aes(x=Year, y=agriculture_land))+
geom_line()+theme_classic()+
ggtitle("Agriculture land")+ylab("")
p6<-ggplot(df_use, aes(x=Year, y=irrigated_agriculture_land))+
geom_line()+theme_classic()+
ggtitle("Irrigated agriculture land")+ylab("")
p7<-ggplot(df_use, aes(x=Year, y=crop_index_1))+
geom_line()+theme_classic()+
ggtitle("Crop index t(-1)")+ylab("")
p8<-ggplot(df_use, aes(x=Year, y=crop_index_1))+
geom_line()+theme_classic()+
ggtitle("Crop index t(-2)")+ylab("")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8, cols=2)
##################################
####                         #####
####      Regression         #####
####                         #####
##################################
line<-lm(crop_index ~ log(gdp_per_capita), data=df_use, na.action=na.exclude)
df2<-df_use[which(df_use$Year<=2005),]
View(df2)
model2<-lm(crop_index ~ log(gdp_per_capita)+crop_index_1, data=df2, na.action=na.exclude)
?data.frame
df3<-data.frame(c(2005:2014), df_use$gdp_per_capita[which(df_use$Year>2004),], NA)
df3<-data.frame(c(2005:2014), df_use$gdp_per_capita[which(df_use$Year>2004)], NA)
View(df3)
df3<-data.frame(c(2005:2013), df_use$gdp_per_capita[which(df_use$Year>2004)], NA)
df3<-data.frame(c(2005:2014), df_use$gdp_per_capita[which(df_use$Year>2004)], NA)
df3<-data.frame(c(2005:2014), df_use$gdp_per_capita[which(df_use$Year>2004)], NA, NA)
colnames(df3)<-c("Year", "gdp_per_capita", "crop_index_1", "crop_index")
df3$crop_index_1[1]<-df_use$crop_index[which(df_use$Year==2005)]
View(df3)
df2<-df_use[which(df_use$Year<=2005),]
model2<-lm(crop_index ~ log(gdp_per_capita)+crop_index_1, data=df2, na.action=na.exclude)
df3<-data.frame(c(2006:2014), df_use$gdp_per_capita[which(df_use$Year>2005)], NA, NA)
colnames(df3)<-c("Year", "gdp_per_capita", "crop_index_1", "crop_index")
df3$crop_index_1[1]<-df_use$crop_index[which(df_use$Year==2005)]
View(df3)
s1<-2006
df3$crop_index<-predict(model2, df3[s1-2005,])
View(df3)
df3$crop_index_1<-predict(model2, df3[s1-2004,])
View(df3)
df2<-df_use[which(df_use$Year<=2005),]
model2<-lm(crop_index ~ log(gdp_per_capita)+crop_index_1, data=df2, na.action=na.exclude)
df3<-data.frame(c(2006:2014), df_use$gdp_per_capita[which(df_use$Year>2005)], NA, NA)
colnames(df3)<-c("Year", "gdp_per_capita", "crop_index_1", "crop_index")
df3$crop_index_1[1]<-df_use$crop_index[which(df_use$Year==2005)]
View(df3)
s1<-2006
df3$crop_index[s1-2005]<-predict(model2, df3[s1-2005,])
View(df3)
df3$crop_index_1[s1-2004]<-predict(model2, df3[s1-2004,])
View(df3)
df2<-df_use[which(df_use$Year<=2005),]
df2<-df_use[which(df_use$Year<=2005),]
model2<-lm(crop_index ~ log(gdp_per_capita)+crop_index_1, data=df2, na.action=na.exclude)
df3<-data.frame(c(2006:2014), df_use$gdp_per_capita[which(df_use$Year>2005)], NA, NA)
colnames(df3)<-c("Year", "gdp_per_capita", "crop_index_1", "crop_index")
df3$crop_index_1[1]<-df_use$crop_index[which(df_use$Year==2005)]
s1<-2006
df3$crop_index[which(df3$Year==s1)]<-predict(model2, df3[which(df3$Year==s1),])
View(df3)
df3$crop_index_1[which(df3$Year==s1+1)]<-predict(model2, df3[which(df3$Year==s1),])
View(df3)
df2<-df_use[which(df_use$Year<=2005),]
model2<-lm(crop_index ~ log(gdp_per_capita)+crop_index_1, data=df2, na.action=na.exclude)
df3<-data.frame(c(2006:2014),
df_use$gdp_per_capita[which(df_use$Year>2005)],
NA,
NA,
df_use$crop_index[which(df_use$Year>2005)])
colnames(df3)<-c("Year", "gdp_per_capita", "crop_index_1", "crop_index_pred", "crop_index_actual")
df3$crop_index_1[1]<-df_use$crop_index[which(df_use$Year==2005)]
s1<-2006
while(s1<2014)
{
df3$crop_index_pred[which(df3$Year==s1)]<-predict(model2, df3[which(df3$Year==s1),])
df3$crop_index_1[which(df3$Year==s1+1)]<-predict(model2, df3[which(df3$Year==s1),])
s1<-s1+1
}
View(df3)
library(Rtools)
install.packages("Rtools")
install.packages("dplyr")
install.packages("data.table")
library(data.table)
install.packages("RMySQL")
library(RMySQL)
library(RSQLite)
library(Rtools)
library(Rtools)
shiny::runApp('~/Desktop/Shiny document/food')
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
read.world<-function(filePath)
{
all_content<-readLines(filePath)
all_content<-all_content[-c(1,2)]
data<-read.csv(textConnection(all_content),header=TRUE, stringsAsFactors=TRUE)
return(data)
}
data_prep<-function(country)
{
#possible targets
cereal<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/cereal_yield/ag.yld.crel.kg_Indicator_en_csv_v2.csv")
crop_index<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/crop_production_index/ag.prd.crop.xd_Indicator_en_csv_v2.csv")
#possible regressors
labor_force<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/labor_force/sl.tlf.totl.in_Indicator_en_csv_v2.csv")
unemployment_rate<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/unemployment_per/sl.uem.totl.zs_Indicator_en_csv_v2.csv")
ag_employ<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_employment/sl.agr.empl.zs_Indicator_en_csv_v2.csv")
gdp<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp/ny.gdp.mktp.cd_Indicator_en_csv_v2.csv")
gdp_capita<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp_per_capita/ny.gdp.pcap.cd_Indicator_en_csv_v2.csv")
irrigated_land<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/irrigated_land/ag.lnd.irig.ag.zs_Indicator_en_csv_v2.csv")
land_area<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/land_area/ag.lnd.totl.k2_Indicator_en_csv_v2.csv")
ag_land_per<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_land_per/ag.lnd.agri.zs_Indicator_en_csv_v2.csv")
population<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/population_total/sp.pop.totl_Indicator_en_csv_v2.csv")
#make a dataframe for a given country
df<-data.frame(Year=c(1960:2014))
######################
######cheat here######
######################
#we really know unemployment rate
#unemployment doesn't count people not looking for work
#the result is that the employed_per is higher than reality!
df$labor_force<-melt(labor_force[which(labor_force$Country.Name==country),c(-2,-3,-4)])$value
df$employed_per<-100-(melt(unemployment_rate[which(unemployment_rate$Country.Name==country),c(-2,-3,-4)])$value)
df$ag_employ<-melt(ag_employ[which(ag_employ$Country.Name==country),c(-2,-3,-4)])$value
#land_area, ag_land_per, and irrigated_land_per can be combined in different ways
df$land_area<-melt(land_area[which(land_area$Country.Name==country),c(-2,-3,-4)])$value
df$ag_land_per<-melt(ag_land_per[which(ag_land_per$Country.Name==country),c(-2,-3,-4)])$value
df$irrigated_land_per<-melt(irrigated_land[which(irrigated_land$Country.Name==country),c(-2,-3,-4)])$value
#gdp info
df$gdp<-melt(gdp[which(gdp$Country.Name==country),c(-2,-3,-4)])$value
df$population<-melt(population[which(population$Country.Name==country),c(-2,-3,-4)])$value
df$gdp_capita<-melt(gdp_capita[which(gdp_capita$Country.Name==country),c(-2,-3,-4)])$value
#possible targets
df$cereal<-melt(cereal[which(cereal$Country.Name==country),c(-2,-3,-4)])$value
df$crop_index<-melt(crop_index[which(crop_index$Country.Name==country),c(-2,-3,-4)])$value
Year<-df$Year
df_use<-as.data.frame(Year)
df_use$agriculture_employees<-df$labor_force*df$employed_per*df$ag_employ
df_use$agriculture_land<-df$land_area*df$ag_land_per
df_use$irrigated_agriculture_land<-df_use$agriculture_land*df$irrigated_land_per
df_use$gdp_per_capita<-df$gdp_capita
df_use$cereal<-df$cereal
df_use$crop_index<-df$crop_index
df_use$crop_index_1<-NA
df_use$crop_index_1[2:dim(df_use)[1]]<-df_use$crop_index[1:dim(df_use)[1]-1]
df_use$crop_index_2<-NA
df_use$crop_index_2[3:dim(df_use)[1]]<-df_use$crop_index[1:(dim(df_use)[1]-2)]
return(df_use)
}
df_use<-data_prep("European Union")
line<-lm(crop_index ~ log(gdp_per_capita), data=df_use, na.action=na.exclude)
shiny::runApp('~/Desktop/Shiny document/food')
shiny::runApp('~/Desktop/Shiny document/food')
View(df3)
df_use<-data_prep("European Union")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
read.world<-function(filePath)
{
all_content<-readLines(filePath)
all_content<-all_content[-c(1,2)]
data<-read.csv(textConnection(all_content),header=TRUE, stringsAsFactors=TRUE)
return(data)
}
data_prep<-function(country)
{
#possible targets
cereal<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/cereal_yield/ag.yld.crel.kg_Indicator_en_csv_v2.csv")
crop_index<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/crop_production_index/ag.prd.crop.xd_Indicator_en_csv_v2.csv")
#possible regressors
labor_force<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/labor_force/sl.tlf.totl.in_Indicator_en_csv_v2.csv")
unemployment_rate<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/unemployment_per/sl.uem.totl.zs_Indicator_en_csv_v2.csv")
ag_employ<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_employment/sl.agr.empl.zs_Indicator_en_csv_v2.csv")
gdp<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp/ny.gdp.mktp.cd_Indicator_en_csv_v2.csv")
gdp_capita<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/gdp_per_capita/ny.gdp.pcap.cd_Indicator_en_csv_v2.csv")
irrigated_land<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/irrigated_land/ag.lnd.irig.ag.zs_Indicator_en_csv_v2.csv")
land_area<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/land_area/ag.lnd.totl.k2_Indicator_en_csv_v2.csv")
ag_land_per<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/agriculture_land_per/ag.lnd.agri.zs_Indicator_en_csv_v2.csv")
population<-read.world("/Users/Walter/Desktop/Shiny document/food/Food data/population_total/sp.pop.totl_Indicator_en_csv_v2.csv")
#make a dataframe for a given country
df<-data.frame(Year=c(1960:2014))
######################
######cheat here######
######################
#we really know unemployment rate
#unemployment doesn't count people not looking for work
#the result is that the employed_per is higher than reality!
df$labor_force<-melt(labor_force[which(labor_force$Country.Name==country),c(-2,-3,-4)])$value
df$employed_per<-100-(melt(unemployment_rate[which(unemployment_rate$Country.Name==country),c(-2,-3,-4)])$value)
df$ag_employ<-melt(ag_employ[which(ag_employ$Country.Name==country),c(-2,-3,-4)])$value
#land_area, ag_land_per, and irrigated_land_per can be combined in different ways
df$land_area<-melt(land_area[which(land_area$Country.Name==country),c(-2,-3,-4)])$value
df$ag_land_per<-melt(ag_land_per[which(ag_land_per$Country.Name==country),c(-2,-3,-4)])$value
df$irrigated_land_per<-melt(irrigated_land[which(irrigated_land$Country.Name==country),c(-2,-3,-4)])$value
#gdp info
df$gdp<-melt(gdp[which(gdp$Country.Name==country),c(-2,-3,-4)])$value
df$population<-melt(population[which(population$Country.Name==country),c(-2,-3,-4)])$value
df$gdp_capita<-melt(gdp_capita[which(gdp_capita$Country.Name==country),c(-2,-3,-4)])$value
#possible targets
df$cereal<-melt(cereal[which(cereal$Country.Name==country),c(-2,-3,-4)])$value
df$crop_index<-melt(crop_index[which(crop_index$Country.Name==country),c(-2,-3,-4)])$value
Year<-df$Year
df_use<-as.data.frame(Year)
df_use$agriculture_employees<-df$labor_force*df$employed_per*df$ag_employ
df_use$agriculture_land<-df$land_area*df$ag_land_per
df_use$irrigated_agriculture_land<-df_use$agriculture_land*df$irrigated_land_per
df_use$gdp_per_capita<-df$gdp_capita
df_use$cereal<-df$cereal
df_use$crop_index<-df$crop_index
df_use$crop_index_1<-NA
df_use$crop_index_1[2:dim(df_use)[1]]<-df_use$crop_index[1:dim(df_use)[1]-1]
df_use$crop_index_2<-NA
df_use$crop_index_2[3:dim(df_use)[1]]<-df_use$crop_index[1:(dim(df_use)[1]-2)]
return(df_use)
}
df_use<-data_prep("European Union")
shiny::runApp('~/Desktop/Shiny document/food')
View(df3)
View(df3)
View(df3)
shiny::runApp('~/Desktop/Shiny document/food')
shiny::runApp('~/Desktop/Shiny document/food')
shiny::runApp('~/Desktop/Shiny document/food')
